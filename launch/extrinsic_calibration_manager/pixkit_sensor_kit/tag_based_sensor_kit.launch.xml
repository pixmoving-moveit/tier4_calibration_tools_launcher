<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="vehicle_id" default="default"/>
  <let name="sensor_model" value="pixkit_sensor_kit"/>
  <let name="parent_frame" value="sensor_kit_base_link"/>
  <let name="function_name" value="extrinsic_calibration_manager"/>

  <arg name="camera_name" default="traffic_light_left_camera"/>
  <arg name="rviz"/>

  <!-- we do not use the standard image_raw name to avoid naming conflicts -->
  <let name="image_decompressed_topic" value="/sensing/camera/traffic_light/image_raw/decompressed" if="$(eval &quot;'$(var camera_name)' == 'traffic_light_left_camera' &quot;)"/>
  <let name="image_compressed_topic" value="/sensing/camera/traffic_light/image_raw/compressed" if="$(eval &quot;'$(var camera_name)' == 'traffic_light_left_camera' &quot;)"/>

  <let name="image_rectified_topic" value="/sensing/camera/traffic_light/rectified/image_raw" if="$(eval &quot;'$(var camera_name)' == 'traffic_light_left_camera' &quot;)"/>
  <let name="camera_info_rectified_topic" value="/sensing/camera/traffic_light/rectified/camera_info" if="$(eval &quot;'$(var camera_name)' == 'traffic_light_left_camera' &quot;)"/>

  <let name="image_raw_topic" value="/sensing/camera/traffic_light/image_raw" if="$(eval &quot;'$(var camera_name)' == 'traffic_light_left_camera' &quot;)"/>
  <let name="camera_info_topic" value="/sensing/camera/traffic_light/camera_info" if="$(eval &quot;'$(var camera_name)' == 'traffic_light_left_camera' &quot;)"/>

  <!-- <let name="pointcloud_topic" value="/sensing/lidar/top/outlier_filtered/pointcloud" if="$(eval &quot;'$(var camera_name)' == 'traffic_light_left_camera' &quot;)"/> -->
  <let name="pointcloud_topic" value="/sensing/lidar/top/ouster/points" if="$(eval &quot;'$(var camera_name)' == 'traffic_light_left_camera' &quot;)"/>

  <let name="calibrate_sensor" value="false"/>
  <let name="calibrate_sensor" value="true" if="$(eval &quot;'$(var camera_name)' == 'traffic_light_left_camera' &quot;)"/>

  <let name="camera_frame" value=""/>
  <let name="camera_frame" value="traffic_light_left_camera" if="$(eval &quot;'$(var camera_name)' == 'traffic_light_left_camera' &quot;)"/>

  <let name="rviz_profile" value=""/>
  <let name="rviz_profile" value="$(find-pkg-share tier4_calibration_tools_launcher)/rviz/pixkit_sensor_kit/tag_calib_camera5_velodyne_top.rviz" if="$(eval &quot;'$(var camera_name)' == 'camera5' &quot;)"/>
  <let
    name="rviz_profile"
    value="$(find-pkg-share tier4_calibration_tools_launcher)/rviz/$(var sensor_model)/tag_calib_traffic_light_camera_lidar_top.rviz"
    if="$(eval &quot;'$(var camera_name)' == 'traffic_light_left_camera' &quot;)"
  />

  <let name="lidar_model" value="os1_32"/>
  <!-- <let name="lidar_model" value="velodyne_vls128"/> -->

  <!-- extrinsic_calibration_client -->
  <arg name="src_yaml" default="$(find-pkg-share individual_params)/config/$(var vehicle_id)/$(var sensor_model)/sensor_kit_calibration.yaml"/>
  <arg name="dst_yaml" default="$(env HOME)/sensor_kit_calibration.yaml"/>

  <!-- extrinsic_calibration_manager -->
  <node pkg="extrinsic_calibration_manager" exec="extrinsic_calibration_manager" name="extrinsic_calibration_manager" output="screen" if="$(var calibrate_sensor)">
    <param name="parent_frame" value="$(var parent_frame)"/>
    <param name="child_frames" value="
    [$(var camera_frame)]"/>
  </node>

  <let name="ns" value="/sensor_kit/sensor_kit_base_link/traffic_light_left_camera"/>
  <group>
    <push-ros-namespace namespace="$(var ns)"/>
    <node pkg="extrinsic_dummy_calibrator" exec="extrinsic_dummy_calibrator" name="extrinsic_dummy_calibrator" output="screen">
    </node>
  </group>

  <!-- image decompressor -->
  <node pkg="image_transport_decompressor" exec="image_transport_decompressor_node" name="decompressor" output="screen">
    <remap from="decompressor/input/compressed_image" to="$(var image_compressed_topic)"/>
    <remap from="decompressor/output/raw_image" to="$(var image_decompressed_topic)"/>
  </node>

  <!-- tag based calibrator -->
  <include file="$(find-pkg-share tier4_calibration_tools_launcher)/launch/extrinsic_tag_based_calibrator/calibrator.launch.xml" if="$(var calibrate_sensor)">
    <arg name="ns" value="$(var parent_frame)/$(var camera_name)/camera_link"/>
    <arg name="parent_frame" value="$(var parent_frame)"/>
    <arg name="child_frame" value="$(var camera_frame)"/>

    <arg name="image_topic" value="$(var image_raw_topic)"/>
    <arg name="camera_info_topic" value="$(var camera_info_topic)"/>

    <arg name="lidar_model" value="$(var lidar_model)"/>
    <arg name="pointcloud_topic" value="$(var pointcloud_topic)"/>
    <arg name="pointcloud_topic_ex" value="$(var camera_info_topic)"/>
  </include>

    <!-- 
    image_raw_topic  camera_info_topic 
    image_rectified_topic camera_info_rectified_topic
    <arg name="image_topic" value="$(var image_decompressed_topic)"/>
    <arg name="camera_info_topic" value="$(var camera_info_topic)"/>
    <arg name="pointcloud_topic_ex" value="$(var camera_info_topic)"/> -->

  <!-- interactive calibrator -->
  <group if="$(var calibrate_sensor)">
    <push-ros-namespace namespace="$(var parent_frame)/$(var camera_frame)"/>

    <node pkg="extrinsic_interactive_calibrator" exec="interactive_calibrator" name="interactive_calibrator" output="screen">
      <remap from="pointcloud" to="$(var pointcloud_topic)"/>
      <!-- <remap from="image" to="$(var image_rectified_topic)"/>
      <remap from="camera_info" to="$(var camera_info_rectified_topic)"/> -->
      <remap from="image" to="$(var image_compressed_topic)"/>
      <remap from="camera_info" to="$(var camera_info_topic)"/>
      <remap from="calibration_points_input" to="calibration_points"/>

      <param name="camera_parent_frame" value="$(var parent_frame)"/>
      <param name="camera_frame" value="$(var camera_frame)"/>
      <param name="use_calibration_api" value="false"/>
      <param name="can_publish_tf" value="false"/>
      <!-- <param name="use_compressed" value="false"/> -->
    </node>

    <include file="$(find-pkg-share intrinsic_camera_calibration)/launch/optimizer.launch.xml"/>
    <node pkg="rviz2" exec="rviz2" name="rviz2" output="screen" args="-d $(var rviz_profile)" if="$(var rviz)"/>
  </group>

  <include file="$(find-pkg-share tier4_calibration_tools_launcher)/launch/camera_rectified/relay_calibration_points.launch.xml" />
</launch>
